/*
 * This file is generated by jOOQ.
 */
package ru.multiplier.dao.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.multiplier.dao.jooq.Indexes;
import ru.multiplier.dao.jooq.Keys;
import ru.multiplier.dao.jooq.Public;
import ru.multiplier.dao.jooq.tables.records.TelegramUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TelegramUser extends TableImpl<TelegramUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.telegram_user</code>
     */
    public static final TelegramUser TELEGRAM_USER = new TelegramUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TelegramUserRecord> getRecordType() {
        return TelegramUserRecord.class;
    }

    /**
     * The column <code>public.telegram_user.id</code>.
     */
    public final TableField<TelegramUserRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.telegram_user.telegram_user_id</code>.
     */
    public final TableField<TelegramUserRecord, Long> TELEGRAM_USER_ID = createField(DSL.name("telegram_user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.telegram_user.username</code>.
     */
    public final TableField<TelegramUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    private TelegramUser(Name alias, Table<TelegramUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TelegramUser(Name alias, Table<TelegramUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.telegram_user</code> table reference
     */
    public TelegramUser(String alias) {
        this(DSL.name(alias), TELEGRAM_USER);
    }

    /**
     * Create an aliased <code>public.telegram_user</code> table reference
     */
    public TelegramUser(Name alias) {
        this(alias, TELEGRAM_USER);
    }

    /**
     * Create a <code>public.telegram_user</code> table reference
     */
    public TelegramUser() {
        this(DSL.name("telegram_user"), null);
    }

    public <O extends Record> TelegramUser(Table<O> child, ForeignKey<O, TelegramUserRecord> key) {
        super(child, key, TELEGRAM_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TELEGRAM_USER_ID_IDX);
    }

    @Override
    public UniqueKey<TelegramUserRecord> getPrimaryKey() {
        return Keys.TELEGRAM_USER_PKEY;
    }

    @Override
    public List<UniqueKey<TelegramUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TelegramUserRecord>>asList(Keys.TELEGRAM_USER_PKEY);
    }

    @Override
    public TelegramUser as(String alias) {
        return new TelegramUser(DSL.name(alias), this);
    }

    @Override
    public TelegramUser as(Name alias) {
        return new TelegramUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TelegramUser rename(String name) {
        return new TelegramUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TelegramUser rename(Name name) {
        return new TelegramUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
